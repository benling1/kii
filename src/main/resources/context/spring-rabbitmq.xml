<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:rabbit="http://www.springframework.org/schema/rabbit"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                            http://www.springframework.org/schema/context   
                            http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                            http://www.springframework.org/schema/tx  
                            http://www.springframework.org/schema/tx/spring-tx.xsd   
                            http://www.springframework.org/schema/aop  
                            http://www.springframework.org/schema/aop/spring-aop.xsd  
                            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd   
                            http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.6.xsd"> 
     
     <context:property-placeholder location="classpath*:/rabbitmq.properties" />
     
    <!-- RabbitMQ start -->
    <!-- 连接配置 -->
<!--     <rabbit:connection-factory id="connectionFactoryMQ" host="172.18.21.61" username="zhrt" -->
<!--         password="zhrt" port="5672"  /> -->
        
    <rabbit:connection-factory id="connectionFactoryMQ" host="${mq.host}" username="${mq.username}"
        password="${mq.password}" port="${mq.port}" />
     <!-- 声明一个 RabbitMQ Template -->   
     <rabbit:admin id="connectAdmin" connection-factory="connectionFactoryMQ" />
	<!-- 延迟队列 start -->
    <bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter" />
    <bean id="messageConverter" class="org.springframework.amqp.support.converter.SimpleMessageConverter" />  
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactoryMQ" message-converter="jsonMessageConverter"/>  
    
     <bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="50" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="200" />
		<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE -->
		<property name="queueCapacity" value="10000" />
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="300" />
		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
		<property name="rejectedExecutionHandler">
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>
	<!-- 卖家服务订购购买消息队列 -->
    <rabbit:queue id="tmc_fuwu_queue" name="tmc_fuwu_queue" durable="true"  auto-declare="true"  auto-delete="false"  />
    <!-- 订单队列 -->
    <rabbit:queue id="tmc_trade_queue" name="tmc_trade_queue" durable="true"  auto-declare="true"  auto-delete="false"  />
	
<!--     <bean id="rabbitFuwuConsumer" class="s2jh.biz.shop.crm.tmc.rabbit.RabbitFuwuConsumer"/> -->
<!--     <rabbit:listener-container connection-factory="connectionFactoryMQ" channel-transacted="false" acknowledge="none" message-converter="jsonMessageConverter" -->
<!--       task-executor="taskExecutor" prefetch="1200" max-concurrency="4" >   -->
<!--         <rabbit:listener queues="tmc_fuwu_queue" ref="rabbitFuwuConsumer"  />   -->
<!--     </rabbit:listener-container>  -->
    	 
    <bean id="rabbitTradeCenterConsumer" class="s2jh.biz.shop.crm.tmc.rabbit.RabbitTradeCenterConsumer"/>
    <rabbit:listener-container connection-factory="connectionFactoryMQ" channel-transacted="false" acknowledge="none" message-converter="jsonMessageConverter"
      task-executor="taskExecutor" prefetch="1200" max-concurrency="40" >  
        <rabbit:listener queues="tmc_trade_queue" ref="rabbitTradeCenterConsumer"  />  
    </rabbit:listener-container> 
	<!-- 延迟队列 end   -->
	
	 <rabbit:direct-exchange name="${tmc.exchange}" >  
        <rabbit:bindings>  
            <rabbit:binding queue="tmc_fuwu_queue" key="${tmc.fuwu.pattern}" />  
            <rabbit:binding queue="tmc_trade_queue" key="${tmc.trade.pattern}" />  
        </rabbit:bindings>  
    </rabbit:direct-exchange>
    
    
    
    
</beans>